using FYPMSWebsite.App_Code;
using System;
using System.Collections.Generic;
using System.Data;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Windows.Forms;

namespace FYPMSWebsite.Student
{
    public partial class ManageProjectGroup : System.Web.UI.Page
    {
        //*********************************************************
        // Uses TODO 26, 27, 28, 29, 30; in Helpers.cs 34, 37, 40 *
        //*********************************************************
        private FYPMSDB myFYPMSDB = new FYPMSDB();
        private Helpers myHelpers = new Helpers();
        private DataTable dtMemberRecord = new DataTable();
        private DataTable dtGroupMembers = new DataTable();
        private int maxMembers = 4;
        readonly string loggedinUsername = HttpContext.Current.User.Identity.Name;


        /***** Private Methods *****/

        private void AddGroupMember(string groupId, string username)
        {
            lblResultMessage.Visible = false;

            //***************
            // Uses TODO 26 *
            //***************
            if (myFYPMSDB.AddStudentToGroup(groupId, username))
            {
                PopulateGroupMembers(groupId);
                pnlGroupMembers.Visible = true;
            }
            else
            {
                myHelpers.ShowMessage(lblResultMessage, "*** SQL error in TODO 26: " + Global.sqlError + ".");
            }
        }

        private bool CanGetGroupMemberRecord(string username)
        {
            bool queryResult = false;
            //***************
            // Uses TODO 27 *
            //***************
            dtMemberRecord = myFYPMSDB.GetStudentRecord(username);

            // Attributes expected to be returned by the query result.
            var attributeList = new List<string> { "USERNAME", "STUDENTNAME", "GROUPID" };

            // Add the logged in student's username and student name to the list of group members if the query result is valid.
            if (myHelpers.IsQueryResultValid("27", dtMemberRecord, attributeList, lblResultMessage))
            {
                queryResult = true;
            }
            return queryResult;
        }

        private void PopulateGroupMembers(string groupId)
        {
            gvGroupMembers.AutoGenerateDeleteButton = false;
            pnlAddGroupMember.Visible = false;

            // Uses TODO 37 in Helpers.cs.
            dtGroupMembers = myHelpers.GetProjectGroupMembers(groupId, lblResultMessage);

            if (dtGroupMembers != null)
            {
                if (dtGroupMembers.Rows.Count != 0)
                {
                    // Uses TODO 34 in Helpers.cs.
                    string isAssigned = myHelpers.IsGroupAssigned(groupId, lblResultMessage);
                    if (isAssigned != "SQL_ERROR")
                    {
                        if (isAssigned == "true")
                        {
                            myHelpers.ShowMessage(lblResultMessage, "The group cannot be changed as it is assigned to a project.");
                        }
                        else
                        {
                            // Uses TODO 40 in Helpers.cs.
                            DataTable dtProjectsInterestedIn = myHelpers.GetProjectsGroupInterestedIn(groupId, lblResultMessage);
                            if (dtProjectsInterestedIn != null)
                            {
                                if (dtProjectsInterestedIn.Rows.Count != 0)
                                {
                                    myHelpers.ShowMessage(lblResultMessage, "The group cannot be changed as it has indicated an interest in one or more projects.");
                                }
                                else
                                {
                                    gvGroupMembers.AutoGenerateDeleteButton = true;
                                    pnlAddGroupMember.Visible = true;
                                    // Reset the username textbox.
                                    txtUsername.Text = "";
                                }
                            }
                            else // An SQL error occurred.
                            {
                                return;
                            }
                        }
                        // If the group is at maximimum size, hidse the add group member panel.
                        if (dtGroupMembers.Rows.Count == maxMembers)
                        {
                            pnlAddGroupMember.Visible = false;
                        }
                        ViewState["memberCount"] = dtGroupMembers.Rows.Count;
                        gvGroupMembers.DataSource = dtGroupMembers;
                        gvGroupMembers.DataBind();
                        pnlGroupMembers.Visible = true;
                    }
                }
                else // Nothing was retrieved.
                {
                    myHelpers.ShowMessage(lblResultMessage, "*** The project group has no members. Please check your database.");
                }
            }
        }

        private void RemoveGroupMember(string selectedUsername, string groupId)
        {
            //***************
            // Uses TODO 28 *
            //***************
            if (myFYPMSDB.RemoveGroupMember(selectedUsername))
            {
                // Delete the project group if the last member has been removed.
                if (gvGroupMembers.Rows.Count == 1)
                {
                    //***************
                    // Uses TODO 29 *
                    //***************
                    if (myFYPMSDB.DeleteProjectGroup(groupId))
                    {
                        myHelpers.ShowMessage(lblResultMessage, "You are not a member of any project group.");
                        txtUsername.Text = selectedUsername;
                        pnlGroupMembers.Visible = false;
                        pnlAddGroupMember.Visible = false;
                        pnlCreateButton.Visible = true;
                    }
                    else // An SQL error occurred.
                    {
                        myHelpers.ShowMessage(lblResultMessage, "*** SQL error in TODO 29: " + Global.sqlError + ".");
                    }
                }
                else
                {
                    // If the removed user is the loggedin user, then do not display group members.
                    if (selectedUsername != loggedinUsername)
                    {
                        PopulateGroupMembers(groupId);
                    }
                    else
                    {
                        myHelpers.ShowMessage(lblResultMessage, "You are not a member of any project group.");
                        pnlAddGroupMember.Visible = false;
                        pnlGroupMembers.Visible = false;
                    }
                }
            }
            else // An SQL error occurred.
            {
                myHelpers.ShowMessage(lblResultMessage, "*** SQL error in TODO 28: " + Global.sqlError + ".");
            }
        }


        /***** Protected Methods *****/

        protected void BtnAddGroupMember_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {
                if (ViewState["groupId"].ToString() != null)
                {
                    AddGroupMember(ViewState["groupId"].ToString(), txtUsername.Text);
                    // Hide add member button if the group has the maximum members.

                }
                else // Group id is not assigned. Should not happen.
                {
                    myHelpers.ShowMessage(lblResultMessage, "*** Cannot get the group id. Please contact 3311rep.");
                }
            }
        }

        protected void BtnCreateGroup_Click(object sender, EventArgs e)
        {
            if (Page.IsValid)
            {
                // This is a new group so create a new project group.
                string groupId = myHelpers.GetNextTableId("ProjectGroup", "groupId", lblResultMessage);
                if (groupId != "") // If the group id is empty, an error occurred getting a new group id.
                {
                    //***************
                    // Uses TODO 30 *
                    //***************
                    if (myFYPMSDB.CreateProjectGroup(groupId))
                    {
                        AddGroupMember(groupId, loggedinUsername);
                        ViewState["groupId"] = groupId;
                        pnlCreateButton.Visible = false;
                        pnlAddGroupMember.Visible = true;
                    }
                    else // An SQL error occurred.
                    {
                        myHelpers.ShowMessage(lblResultMessage, "*** SQL error in TODO 30: " + Global.sqlError + ".");
                    }
                }
            }
        }

        protected void CvValidateNewMember_ServerValidate(object source, ServerValidateEventArgs args)
        {
            // Display the group members if the query result is valid.
            if (CanGetGroupMemberRecord(txtUsername.Text))
            {
                // Check if there is a student with the specified username.
                if (dtMemberRecord.Rows.Count != 0)
                {
                    {
                        // Check if the student is already a member of another group.
                        if (dtMemberRecord.Rows[0]["GROUPID"].ToString() != "")
                        {
                            CvValidateNewMember.ErrorMessage = "The student is a member of another group.";
                            args.IsValid = false;
                        }
                        else // Check if the student has already been added to the group.
                        {
                            foreach (DataRow row in dtGroupMembers.Rows)
                            {
                                if (row["USERNAME"].ToString() == txtUsername.Text)
                                {
                                    CvValidateNewMember.ErrorMessage = "The student is already a member of this group.";
                                    args.IsValid = false;
                                }
                            }
                        }
                    }
                }
                else // No student with this username.
                {
                    CvValidateNewMember.ErrorMessage = "There is no student with this username.";
                    args.IsValid = false;
                }
            }
        }

        protected void GvGroupMembers_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.Controls.Count == 3)
            {
                e.Row.Cells[2].Visible = false;
            }

            if (e.Row.Controls.Count == 4)
            {
                e.Row.Cells[3].Visible = false;
            }

            if (e.Row.RowType == DataControlRowType.Header)
            {
                myHelpers.RenameGridViewColumn(e, "STUDENTNAME", "NAME");
            }
        }

        protected void GvGroupMembers_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            string selectedUsername = gvGroupMembers.Rows[e.RowIndex].Cells[1].Text;
            string groupId = gvGroupMembers.Rows[e.RowIndex].Cells[3].Text;

            if (selectedUsername == loggedinUsername)
            {
                DialogResult dialogResult = MessageBox.Show("If you remove yourself from the group," + Environment.NewLine
                + "you will no longer have access to the group." + Environment.NewLine + "Do you want to proceed?",
                "Remove Group Member", MessageBoxButtons.YesNo);

                switch (dialogResult)
                {
                    // Confirm removal of loggedin user.
                    case DialogResult.Yes:
                        ViewState["groupId"] = "";
                        RemoveGroupMember(selectedUsername, groupId);
                        break;
                    // No action.
                    case DialogResult.No:
                        break;
                }
            }
            else
            {
                RemoveGroupMember(selectedUsername, groupId);
            }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!Page.IsPostBack)
            {
                if (CanGetGroupMemberRecord(loggedinUsername))
                {
                    if (dtMemberRecord.Rows.Count != 0)
                    {
                        ViewState["memberCount"] = 0;
                        if (dtMemberRecord.Rows[0]["GROUPID"].ToString() != "")
                        {
                            PopulateGroupMembers(dtMemberRecord.Rows[0]["GROUPID"].ToString());
                        }
                        else
                        {
                            txtUsername.Text = dtMemberRecord.Rows[0]["USERNAME"].ToString();
                            myHelpers.ShowMessage(lblResultMessage, "You are not a member of any group.");
                            pnlCreateButton.Visible = true;
                        }
                        ViewState["groupId"] = dtMemberRecord.Rows[0]["GROUPID"].ToString();
                    }
                    else // Nothing was retrieved.
                    {
                        myHelpers.ShowMessage(lblResultMessage, "*** The username " + loggedinUsername + " does not exist. Please check your database.");
                    }
                }
            }
        }
    }
}